import numpy as np
import matplotlib.pyplot as plt
from math import sin, radians

# Using  Crank-Nicolson method. 
Ngrid = 50
Nsteps = 5000
dt =1
dx=1
g = 1000# in cm/s^2
H=5
ux=2/3
angle = radians(30)
visco = g*H*H*sin(angle)/2/ux #lava viscosity from class
vis_air = 0.14 # air kinematic viscosity in cm^2/s

v = 2/3
alpha = v*dt/2/dx
D1 = visco
D2 =vis_air
beta1 = D1*dt/dx**2
beta2 = D2*dt/dx**2
const = dt*g*sin(angle) # the constatnt term add to thhe eqyuation

x = np.arange(Ngrid)*dx

#Inirial conditions
f1 = np.copy(x)*1./Ngrid #for D1
f2 = np.copy(x)*1./Ngrid # for D2

#SET UP PLOT
plt.ion()
fig, axes = plt.subplots(1,2)
axes[0].set_title("D=%3.1f"%D1)
axes[1].set_title("D=%3.1f"%D2)

#Plotting intitial state in background for refference
#create the refference ateady state solution
#y1 = []
#y2 = []
#for i in range(len(x)):
 #   y1.append(-g/visco *sin(angle)*(x[i]**2 -H*x[i])) 
  #  y2.append(-g/vis_air *sin(angle)*(x[i]**2 -H*x[i]))
    
#I tried to add the steady state solution to it but I guess I did it wrong I would have to myltiply ux by dt and add to the x component.

axes[0].plot(x,f1,"k-")
axes[1].plot(x,f2,'k-')
#axes[0].plot(x,y1,"k-")
#axes[1].plot(x,y2,'k-')


#WE will be updating these plotting objects
plt1, = axes[0].plot(x,f1,'ro')
plt2, = axes[1].plot(x,f2,'ro')

for ax in axes:
    ax.set_xlim([0,Ngrid])
    ax.set_ylim([0,2])
    
fig.canvas.draw()

count=0

while count< Nsteps:
    #setting up matrices for diffuion
    A1 = np.eye(Ngrid)*(1+2*beta1) + np.eye(Ngrid, k=1)* -beta1
    +np.eye(Ngrid, k=-1)*-beta1+np.eye(Ngrid)*const
    A2 = np.eye(Ngrid)*(1+2*beta2) + np.eye(Ngrid, k=1)* -beta2
    +np.eye(Ngrid, k=-1)*-beta2+np.eye(Ngrid)*const   # We add the gravitationa; constant term in the middle diagonal line

    #Boundary condition to keep first element fixed
    
    A1[0][0] =1.0
    A2[0][0] =1.0
    A1[0][1] =0
    A2[0][1] =0
    
    ## Calculate advection
    f1[1:Ngrid -1] = 0.5*(f1[2:] + f1[:Ngrid-2]) -alpha* (f1[2:]-f1[:Ngrid -2])
    f2[1:Ngrid -1] = 0.5*(f2[2:]+f2[:Ngrid -2]) -alpha *(f2[2:]-f2[:Ngrid -2])
    
    
    # Solving for the next timestep
    f1 = np.linalg.solve(A1,f1)
    f2 = np.linalg.solve(A2,f2)
    
    plt1.set_ydata(f1)
    plt2.set_ydata(f2)
    
    fig.canvas.draw()
    plt.pause(0.001)
    count +=1
    
